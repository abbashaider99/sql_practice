SELECT * FROM WORKERS;

use human;
show databases;
drop database students;

create table person(
PersonID int PRIMARY KEY,
FirstName VARCHAR(255),
LastName VARCHAR(255),
Age int(10)
);

desc person;

create table Orders (
OrderID int Primary Key,
OrderNumber int(50),
PersonID int,
foreign key(PersonID) references person(PersonID)
);

desc Orders;


--------------- --    - - - -- -- -- -- -- - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - -- -- -

-- Reduce OR statement 
SELECT * FROM WORKERS WHERE COUNTRY= 'India' OR COUNTRY = 'Pakistan' Or Country = 'Nepal';

-- Better way IN
SELECT * FROM WORKERS WHERE COUNTRY IN ('India', 'Pakistan', 'Nepal');

-- NOT IN
SELECT * FROM WORKERS WHERE COUNTRY NOT IN('India', 'Pakistan');  

INSERT INTO WORKERS (FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, COUNTRY) VALUES ('ABBAS', 'HAIDER', 55000, 'JUNE 4 2022', NULL);

-- if null value
SELECT * FROM WORKERS WHERE COUNTRY is NULL;

-- Wildcard
SELECT * FROM WORKERS WHERE FIRST_NAME LIKE '_I%';

-- Sorting using Order By 'ASC (DEFAULT)', DESC for Descending
SELECT * FROM WORKERS ORDER BY SALARY;

-- Distinct
SELECT DISTINCT COUNTRY FROM WORKERS;

-- Group by
SELECT COUNTRY, COUNT(country) FROM WORKERS GROUP BY COUNTRY;

SELECT COUNTRY, MIN(SALARY) FROM WORKERS GROUP BY COUNTRY;

SELECT COUNTRY, MAX(SALARY) FROM WORKERS GROUP BY COUNTRY;

SELECT COUNTRY, SUM(SALARY) FROM WORKERS GROUP BY COUNTRY;

SELECT COUNTRY, AVG(SALARY) FROM WORKERS GROUP BY COUNTRY;

SELECT COUNTRY, count(COUNTRY) FROM WORKERS GROUP BY COUNTRY HAVING COUNT(COUNTRY) > 1;

SELECT COUNTRY, MIN(SALARY) FROM WORKERS GROUP BY COUNTRY ORDER BY MIN(SALARY);

-- CHECK CONSTRAINT

create table account(
Id int primary key,
name varchar(255),
AccNumber int(50) UNIQUE,
balance INT,
constraint acc_balance_chk check (balance> 1000)
);
desc account;

insert into account(Id, name, AccNumber, balance) Values (2, "Abbas", 94525, 5000);

SELECT * FROM ACCOUNT;

 --    DEFAULT VALUE -----
DROP TABLE ACCOUNT;

create table account(
id int primary key,
name varchar(255),
balance int not null default 0
);
desc account;

insert into account(id, name) values (1, "AbbasHaider");

select * from account;

-- ALTER COMMANDS (ADD, DROP, MODIFY, RENAME, CHANGE)

-- ADD COLUMN
Alter table account add column interest int(50); 

-- DELETE COLUMN
Alter table account drop column interest;

-- MODIFIY COLUMN -> CAN MODIFY ONLY DATATYPE AND CAN ADD CONSTRAINT ONLY.
alter table account MODIFY column interest double default 0;
desc account;

-- REMANE COLUMN -> COMMAND CHANGE ONLY COLUMN NAME 
Alter table account RENAME column interest to interestRate;

-- CHANGE COLUMN -> COMMAND CAN CHANGE DATATYPE AND CAN ADD CONSTRAINT TOO.alter
Alter table account CHANGE column interestRate Interest_Rate float default 0;

-- RENAME THE TABLE
Alter table account RENAME to account_info;
desc account_info;

-- DML (DATA MODIFICATION COMMAND), (INSERT, SELECT, UPDATE, DELETE) COMMAND

-- SELECT COMMAND FOR RETRIEVE DATA

Select * from account_info;

-- INSERT COMMAND 
Insert into account_info(id, name) VALUES (2, "John"); -- balance and interest rate is default so don't need to insert.

-- UPDATE COMMAND
Update account_info set Interest_Rate = 10 where id=2;

-- -------------------------------------------------------------------------------------------------------------------!

show databases;
use company;
show tables;
select * from workers;


Insert INTO workers(id, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, COUNTRY) VALUES (14, "NAZZER", "JAFRI", 23000, "MAY 23 2022", "India");

-- INSERT COMMAND WITH LESS INFO
Insert INTO workers (id, first_name, salary) VALUES (15, "Haider" ,3400);

-- UPDATE COMMAND 
Update workers set LAST_NAME = "BAQRI", JOINING_DATE = "JAN 23 2019", COUNTRY = "CANADA" Where id = 15;

-- UPDATE MULTIPLE OR ALL COLUMNS
 
 -- first we add a new column so that we can update saperately from improtant data.
 alter table workers add column PINCODE int;
 
 -- Now update PINCODE column with some values
Update workers set PINCODE = 244304;

-- Disable safe mode
SET SQL_SAFE_UPDATES = 0;

Select * from workers;

-- We can perform calculation
Update workers set PINCODE = PINCODE + 1;

-- DELETE COMMAND
Delete from workers where id = 2;

-- DELETE ENTIRE ROW
Delete from workers;  -- I didn't executed this command


show databases;
use human;
show tables;
desc person;
desc orders;

INSERT into person (PersonID, FirstName, LastName, Age) VALUES (1, "Faiz", "Abbas", 25);
SELECT * from person;

INSERT into orders (OrderID, OrderNumber, PersonID) VALUES (12, 1234, 1);
SELECT * from orders;

--  Trying to INSERT into order table, Error- because foregin key' value does not exist in parent key.
INSERT INTO orders (OrderID, OrderNumber, PersonID) values (234, 3434, 23);

-- Trying to DELETE from person table, Error- because its corrosponding entry is avaiable in its child table.
DELETE FROM person where PersonID = 1;

-- ON DELETE CASCADE use in Parent Table - to delete the child enteries during deletion in parent table.
-- ON DELETE SET NULL use in Parent Table - if we want to null in child table and don't want to delete entire row. - These constraint written with reference.


Create table customer (
CUSID INT primary KEY,
Name varchar(255),
Age int
);

insert into customer values (3, "Rehbar",32);
select * from customer;

Create table order2 (
OrderID2 INT primary KEY,
Name varchar(255),
CUSID int,
foreign key (CUSID) references customer (CUSID) ON DELETE SET NULL
);

DESC ORDER2;

select * from order2;

INSERT INTO ORDER2  VALUES (2, "Abbas", 1);

-- Now if I delete from customer than from table Order2 corrosponding record foreign key's value will be null as we defined in the paraent table ON DELETE SET NULL.

DELETE FROM CUSTOMER WHERE CUSID = 1;

SELECT * FROM CUSTOMER;
INSERT INTO CUSTOMER values (2, "Raza", 29);

select * from order2;

insert into order2 values (1, "Abbas", 1);

-- -----------------------------------------------------JOINS-----------------------------------------------

-- INNER JOIN
SELECT p.*, o.* from person as p INNER JOIN orders as o ON p.personid = o.personid;

-- Using Inner join without using INNER JOIN KEYWORD
SELECT p.*, o.* from person as p, orders as o where p.personid = o.personid;

-- LEFT JOIN
SELECT p.*, o.* from person as p LEFT JOIN orders as o ON p.personid = o.personid;

-- RIGHT JOIN
SELECT p.*, o.* from person as p RIGHT JOIN orders as o ON p.personid = o.personid;

-- FULL JOIN  (LEFT JOIN + UNION + RIGHT JOIN)
SELECT p.*, o.* from person as p LEFT JOIN orders as o ON p.personid = o.personid UNION 
SELECT p.*, o.* from person as p RIGHT JOIN orders as o ON p.personid = o.personid;

-- CROSS JOIN

-- UNION




-- But in this case person and orders having different columns so its not possible to find out thr result.
SELECT * FROM PERSON
UNION
SELECT * FROM ORDERS;

-- CREASTING VIEW - VIEW IS LIKE A GOGGLES WE CAN LIMIT THE COLUMNS TO SHOW
Create view custom_view AS SELECT FirstName, Age FROM PERSON;

-- VIEWING FROM VIEW
Select * from custom_view;

-- ALTERING THE VIEW
ALTER VIEW custom_view AS SELECT FirstName, LastName, Age from Person;

-- DROPPING THE VIEW
DROP VIEW if exists custom_view;


 
-- ------------------------QUESTIONS---------------------------
show databases;
use company;
show tables;
select * from workers;
select salary from workers order by salary desc;
select top salary from workers;


-- 2nd highest salary
select max(salary) from workers where salary not in (select max(salary) from workers);

-- nth highest salary

select distinct salary from workers order by salary desc;
insert into workers values(16, "john", "abbas", 239805, "JAN 2 2019", "India", 244304);

-- select salary from workers order by salary desc limit N-1, 1;
select distinct salary from workers order by salary desc LIMIT 1,1;


-- INTERVIEW PRACTICE

-- 1) CREATE DATABASE
CREATE DATABASE IF NOT EXISTS MYDB; -- right practices to write

-- Like keyword
SELECT * FROM WORKERS WHERE FIRST_NAME LIKE 'A%' OR  FIRST_NAME like '%S';

-- find current date and time---
select current_date();
select current_time();

-- FETCH ALTERNATE RESULT FROM THE TABLE
-- dummy practice
select * from workers;
select first_name, count(first_name) from workers group by first_name;

-- fetch even rows
select * from workers where id%2=0;

-- fetch odd rows
select * from workers where id%2=1;

-- duplicate entries check
select first_name, count(first_name) as Total from workers group by first_name having count(first_name)>1;

insert into workers values (18, "Haider", "Baqri", 23423, "JUNE 4 2018", "India", 244304);

-- find first 5 records
SELECT * FROM WORKERS LIMIT 5;

-- FIND LAST 5 RECORDS

SELECT * FROM WORKERS ORDER BY ID desc limit 5;

-- FIND FIRST RECORD OF THE TABLE
SELECT * FROM WORKERS limit 1;

-- FIND LAST RECORD OF THE TABLE
SELECT MAX(ID) FROM WORKERS;
             -- or
SELECT * FROM WORKERS ORDER BY ID DESC LIMIT 1;

-- FIND DISTICNT VALUES WITHOUT USING DISTINCT KEYWORD - GROUP KEYWOR MAKE A GROUP AND DONT COUNT DUPLICATE VALUES
SELECT FIRST_NAME FROM WORKERS GROUP BY FIRST_NAME; 
   -- OR --
   -- UNION ALSO CAN BE USED
























